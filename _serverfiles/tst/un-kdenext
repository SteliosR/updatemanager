#!/bin/bash

ScriptName=un-kdenext
ScriptVersion=1.2.0
ScriptDate=2014-07-04

ScriptCopyright='2014 Duinsoft Packages <pkg@duinsoft.nl>'
ScriptLicence='GPL-2 - http://www.gnu.org/licenses'
ScriptURL=http://duinsoft.nl/tools.php

Temp=/tmp/$ScriptName.d
List=$Temp/packages
Installed=$Temp/installed
Available=$Temp/available
Downgrade=$Temp/downgrade
Remove=$Temp/remove
Url0=http://home.solydxk.com/umfiles/prd/un-kdenext-amd64/Packages.gz
Url1=http://home.solydxk.com/umfiles/prd/un-kdenext-i386/Packages.gz


# Space separated list of packages that MUST be handled before downgrading
Upgrade='solydk-system-adjustments'

# Space separated list of packages to purge before downgrading
Purge='hal hal-info libhal-storage1 libhal1'


Syntax="$ScriptName - version $ScriptVersion - $ScriptDate
Create downgrade and/or remove lists to be fed to apt-get before executing the
next dist-upgrade without the kdenext repository, optionally performing all the
necessary apt-get actions afterwards.

Usage: $ScriptName [OPTION]...

Options:
  -c          continue processing at a later stage (see below)
  -d          downgrade packages after creating the lists
  -h, --help  display this text and exit
  -p          do not update the package lists
  -r          remove packages after creating the lists
  -s          simulate purging, downgrading and removing
  -u          dist-upgrade after downgrading and removing packages

The -c option can be used if you want to run each part of the whole process
separately, using this script as a front-end. I.e. start without options,
downgrade with -cd, then remove with -cr and finally dist-upgrade with -cu.

Only skip updating the package lists (apt-get update) if you are certain the
current lists are up do date.
Make sure your sources.list does not reference a kdenext repository component
that actually contains packages (an empty one is ok).

DISCLAIMER

As far as I am aware, this script does what it's supposed to do. Nevertheless,
you use it entirely at your own risk. Also, using this script requires a certain
amount of intelligence and self-control. If you do silly things, you can expect
silly results..."


Args=$(getopt -ocdhprsu -lhelp -n$ScriptName -- "$@"); [ $? != 0 ] && exit 1
eval set -- "$Args"
while [ "$1" ]; do
	case "$1" in
	--)	;;
	-c)			OptContinue=1;;
	-d)			OptDowngrade=1;;
	-f)			OptPurge=1;;
	-h|--help)	echo "$Syntax"; exit;;
	-p)			OptSkipUpdate=1;;
	-r)			OptRemove=1;;
	-s)			OptDowngrade=1; OptRemove=1; OptSimulate="--simulate";;
	-u)			OptDistUpgrade=1;;
	*)			echo "Unknown argument"; exit 1;;
	esac
	shift
done


Retrieve(){
	local N S
	[ "$3" ] && S=$3 || S=3600
	[ -s $1 ] || N=1
 	[ -v N ] || [ $(( $(date +%s) - $(date -r $1 +%s) )) -gt $S ] && N=2
	if [ -v N ]; then
		echo "retrieving kdenext package list $(basename $1) . . ."
		wget --no-use-server-timestamps -qO $1 $2
		[ ${2: -3} == .gz ] && { mv $1 $1.gz; gzip -d $1.gz; }
	fi
}


[ ! -d $Temp ] && mkdir $Temp
cd $Temp


if [ ! -v OptContinue ]; then
	rm -f $Remove $Downgrade

	if [ ! -v OptSkipUpdate ]; then
		echo "updating current package lists . . ."
		sudo apt-get update
		ForceRetrieve=1
		rm -f $Available
	fi
	
	Retrieve $List-amd64 $Url0 $ForceRetrieve
	Retrieve $List-i386 $Url1 $ForceRetrieve

	echo "building installed packages list . . ."
	sed -nr 's/^ii  ([0-9a-zA-Z.:+-]+) +([0-9a-zA-Z.:~+-]+) +(all|amd64|i386) .+$/\1 \2 \3/p' < <(dpkg-query -l) >$Installed

	if [ ! -v OptSkipUpdate ]; then
		echo "building available packages list (this will take a while) . . ."
		while read -r; do
			K=${REPLY%%:*}
			case "$K" in
			Package)		P=${REPLY#*: };;
			' Version')		V=${REPLY#*: };;
			'     File')	F=${REPLY#*: }; [ $F == /var/lib/dpkg/status ] || [ "${P: -5}" == ":i386" ] || echo "$P $V" >>$Available;;
			esac
		done < <(apt-cache dump)
	fi

	echo -e "\nchecking installed packages . . ."
	while read Line; do
		read Package Version Arch < <(echo $Line)
		Package=${Package%:amd64}
		Package=${Package%:i386}
		[ $Arch == all ] && Arch=amd64
		Found=$(sed -n '/^Package: '$Package'$/,/^$/p;T;q' $List-$Arch)
		if [ "$Found" ]; then
			KdeNext=$(sed -n 's/^Version: \(.*\)/\1/p;T;q' < <(echo "$Found"))
			New=$(sed -n 's/^'$Package' \(.*\)$/\1/p;T;q' $Available)
			echo "$Package found in kdenext ($Arch)"
			if [ -z "$New" ]; then
				echo " >>> no new version <<<"
				echo $Package >>$Remove
			elif [ $New == $Version ]; then
				echo " - $New = $Version - ok"
			elif dpkg --compare-versions $New lt $KdeNext; then
				echo " >>> new version ($New) < old ($KdeNext) <<<"
				echo $Package=$New >>$Downgrade
			else
				echo " - $New > $KdeNext - to downgrade list anyway"
				echo $Package >>$Downgrade
			fi
		fi
	done <$Installed

	echo -e "\npackage check done"
	[ -s $Downgrade ] && echo "see $Downgrade for packages to downgrade" || echo "nothing to downgrade"
	[ -s $Remove ] && echo "see $Remove for packages to remove" || echo "nothing to remove"
fi


[ -v OptSimulate ] && echo -e "\n** simulation mode is set! **"


if [ -s $Downgrade ] && [ -v OptDowngrade ]; then
	if [ "$Upgrade" ]; then
		echo -e "\ninstalling/upgrading before downgrading . . ."
		sudo apt-get install $OptSimulate $Upgrade
	fi
	if [ "$Purge" ]; then
		echo -e "\nremoving (purge) before downgrading . . ."
		sudo apt-get purge $OptSimulate $Purge
	fi
	echo -e "\ndowngrading (with force-overwrite set) . . ."
	sudo apt-get -o Dpkg::Options::="--force-overwrite" --yes --force-yes install $OptSimulate $(cat $Downgrade)
fi


if [ -s $Remove ] && [ -v OptRemove ]; then
	echo -e "\nremoving . . ."
	sudo apt-get remove $OptSimulate $(cat $Remove)
fi


if [ -v OptDistUpgrade ]; then
	echo -e "\ndist-upgrade . . ."
	sudo apt-get dist-upgrade $OptSimulate
fi
