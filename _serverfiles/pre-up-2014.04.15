#!/bin/bash

# Debug mode (set to true or false)
DEBUG=false

# Get the current release: solydx, solydk, solydkbe or solydkbo
RELEASE=$(cat /etc/solydxk/info | grep EDITION= | cut -d'=' -f2)

BITS=$(uname -m)
echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tRelease: $RELEASE $BITS"

# Function to install a given package
# Parameters:
# 1. package name
# 2. action: install, reinstall, purge, remove, forceremove, forceinstall
# 3. distribution: all, solydx32, solydx64, solydk32, solydk64, solydkbo, solydkbe
function handle_pck {
    PCK=$1
    ACTION=$2
    DISTRO=$3
    CONTINUE=true
    
    if [ "$DISTRO" != "all" ] && [ "$DISTRO" != "$RELEASE" ]; then
        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tdo not $ACTION $PCK on $RELEASE ($DISTRO only)"
        CONTINUE=false
    fi

    if $CONTINUE; then
	PCKINST=$(dpkg-query -l $PCK | grep ^i)
	if [ "${PCKINST:0:1}" != "i" ]; then
	    if [ "$ACTION" != "install" ] && [ "$ACTION" != "forceinstall" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\t$ACTION not needed, $PCK not installed"
		CONTINUE=false
	    fi
	    PCKINST=$PCK
	else
	    if [ "$ACTION" == "install" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\t$ACTION not needed, $PCK already installed"
		CONTINUE=false
	    fi
	fi
	
	if $CONTINUE; then
	    if [ "$ACTION" == "forceremove" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tdpkg --force-remove-reinstreq -P $PCK"
		if ! $DEBUG; then
		    dpkg --force-remove-reinstreq -P $PCK
		fi
	    else
		if [ "$ACTION" == "reinstall" ] || [ "$ACTION" == "forceinstall" ]; then
		    ACTION="install --reinstall"
		fi
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tapt-get $ACTION $PCK"
		if ! $DEBUG; then
		    apt-get $ACTION -y --force-yes $PCK
		fi
	    fi
	fi
    fi
}

# Function to handle a given configuration file
# Parameters:
# 1. full path to configuration file
# 2. option name (before "=")
# 3. optional: option value (after "=")
# 4. optional: string to add option and value after (on a new line)
# When (3) is left empty, (2) will be simply appended to the configuration file
function handle_cnf {
    CNF=$1
    OPT=$2
    VAL=''
    if [ ! -z $3 ]; then
        VAL=$3
    fi
    APPAFTER=''
    if [ ! -z $4 ]; then
        APPAFTER=$4
    fi
    
    LINE=$OPT
    if [ "$VAL" != "" ]; then
        LINE="$OPT=$VAL"
    fi
    
    ESCOPT=${OPT//\[/\\[}
    ESCOPT=${ESCOPT//\]/\\]}
    ESCOPT=${ESCOPT//\//\\/}
        
    if [ -e $CNF ]; then
	if grep -Fq $OPT $CNF; then
	    if [ "$OPT" != "$LINE" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\t$CNF : replace $OPT with $LINE"
		if ! $DEBUG; then
		    sed -i "s/$ESCOPT/$LINE/" $CNF
		fi
	    fi
	else
	    if [ "$APPAFTER" == "" ]; then
	        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tAppend $LINE to $CNF"
	        if ! $DEBUG; then
		    echo >> $CNF
		    echo -e "$LINE" >> $CNF
		fi
	    else
	        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-UpScript\tDEBUG\tAppend $LINE after $APPAFTER in $CNF"
	        if ! $DEBUG; then
	            sed -i "\'/\$APPAFTER/a \$LINE\'" $CNF
	        fi
	    fi
	fi
    fi
}

# Function to prevent a package from updating
function hold_pck {
  if [ ! -z $1 ]; then
    echo "$1 hold" | dpkg --set-selections
  fi
}

# Function to remove the hold on a package
function unhold_pck {
  if [ ! -z $1 ]; then
    echo "$1 install" | dpkg --set-selections
  fi
}

# Function to seed debconf answers
function preseed {
  if [ ! -z "$1" ]; then
    echo "$1" | debconf-set-selections
  fi
}

# ==============================================================
# Configure pre upgrade commands below
# ==============================================================
# ==============================================================

PCKINST=$(dpkg-query -l mate-system-tools | grep ^i)
if [ "${PCKINST:0:1}" != "i" ]; then
  apt-get purge -y --force-yes mate-polkit-common
fi

handle_pck 'libc6' 'reinstall' 'all'
handle_pck 'libc6:i386' 'reinstall' 'all'
handle_pck 'g++-4.7' 'reinstall' 'all'
handle_pck 'grub-pc' 'reinstall' 'all'
handle_pck 'cups-daemon' 'reinstall' 'all'
handle_pck 'steam' 'reinstall' 'all'

# We're going to use this as a pre-script for the 201404 UP
# You need to enable the new extensions manually
# This is a one-time effort

# Install the system-adjustments package first
DIST=$(cat /etc/solydxk/info | grep EDITION | cut -d'=' -f 2)
if [ "$DIST" == "solydx32" ] || [ "$DIST" == "solydx64" ]; then
  apt-get install -y --force-yes solydx-system-adjustments
elif [ "$DIST" == "solydk32" ] || [ "$DIST" == "solydk64" ]; then
  apt-get install -y --force-yes solydk-system-adjustments
elif [ "$DIST" == "solydkbe" ]; then
  apt-get install -y --force-yes solydkbe-system-adjustments
elif [ "$DIST" == "solydkbo" ]; then
  apt-get install -y --force-yes solydkbo-system-adjustments
fi

# Clean up /etc/skel
rm -r "/etc/skel/.mozilla/firefox/Crash Reports"
rm -r "/etc/skel/.kde/share"
rm /etc/skel/.mozilla/firefox.last-version

if [ -e /etc/skel/.gtkrc-2.0.dpkg-new ]; then
  rm /etc/skel/.gtkrc-2.0
  mv /etc/skel/.gtkrc-2.0.dpkg-new /etc/skel/.gtkrc-2.0
  rm /etc/skel/.gtkrc-2.0-kde4
  ln -s .gtkrc-2.0 /etc/skel/.gtkrc-2.0-kde4
fi

# Get all users
USERS=$(cat /etc/passwd | grep bash | grep home | cut -d':' -f 1)

# FIREFOX
echo "> Start Firefox"
FF=$(dpkg-query -l firefox | grep ^i | awk '{print$2}')
if [[ $FF == *dpkg-query* ]]; then
  FF=$(dpkg-query -l firefox-esr | grep ^i | awk '{print$2}')
  if [[ $FF != *dpkg-query* ]]; then
    FF=""
  fi
fi
if [ "$FF" != "" ]; then
  echo "> Firefox installed"
  FFL10N=$(dpkg-query -l firefox-l10n-* | grep ^i | awk '{print$2}')
  echo "> FF: l10n = $FFL10N"
  if [[ $FFL10N == *dpkg-query* ]]; then
    FFL10N=$(dpkg-query -l firefox-esr-l10n-* | grep ^i | awk '{print$2}')
    echo ">> $FFL10N"
    if [[ $FFL10N == *dpkg-query* ]]; then
      FFL10N=""
    else
      echo ">> FF: Purge $FF $FFL10N"
      apt-get purge -y --force-yes $FF $FFL10N
    fi
  else
    echo "> FF: Purge $FF $FFL10N*"
    apt-get purge -y --force-yes $FF $FFL10N
  fi

  # Install Firefox, incl. the new adjustments package
  if [ "$FFL10N" == "$FF-l10n-en-us" ]; then
    FFL10N=""
  fi
  echo "> FF: Install $FF $FF-solydxk-adjustments $FFL10N"
  apt-get install -y --force-yes $FF $FF-solydxk-adjustments $FFL10N

  # Copy Firefox extensions for each user if they don't exist
  XPIS=$(find /opt/firefox/browser/extensions -name *.xpi -type f)
  for USER in $USERS; do
    DIR="/home/$USER/.mozilla/firefox/mwad0hks.default"
    if [ -d $DIR ]; then
      mkdir -p "$DIR/extensions"
      for XPI in $XPIS; do
        PCK=$(basename $XPI)
        if [ ! -e "$DIR/extensions/$PCK" ]; then
          echo "> FF: Copy $XPI to $DIR/extensions/$PCK"
          cp -f $XPI "$DIR/extensions/$PCK"
        fi
      done
      PREFS="$DIR/prefs.js"
      echo 'user_pref("extensions.qls.switch_gulocale", true);' >> $PREFS
      echo 'user_pref("extensions.adblockplus.currentVersion", "2.5.1");' >> $PREFS
      echo 'user_pref("extensions.enabledAddons", "%7B25A1388B-6B18-46c3-BEBA-A81915D0DE8F%7D:1.7.8.5,%7Bd10d0bf8-f5b5-c8b4-a8b2-2b9879e08c5d%7D:2.5.1");' >> $PREFS
      chown -Rf $USER:$USER "$DIR/extensions"
    fi
  done
fi

# THUNDERBIRD
echo "> Start thunderbird"
TB=$(dpkg-query -l thunderbird | grep ^i | awk '{print$2}')
if [[ $TB == *dpkg-query* ]]; then
  TB=""
fi
if [ "$TB" != "" ]; then
  echo "> Thunderbird installed"
  TBL10N=$(dpkg-query -l thunderbird-l10n-* | grep ^i | awk '{print$2}')
  echo "> TB: l10n = $TBL10N"
  if [[ $TBL10N == *dpkg-query* ]]; then
    TBL10N=""
  else
    echo "> TB: Purge $TB $TBL10N*"
    apt-get purge -y --force-yes $TB $TBL10N
  fi

  # Install Thunderbird, incl. the new adjustments package
  if [ "$TBL10N" == "$TB-l10n-en-us" ]; then
    TBL10N=""
  fi
  echo "> TB: Install $TB $TB-solydxk-adjustments $TBL10N"
  apt-get install -y --force-yes $TB $TB-solydxk-adjustments $TBL10N

  # Copy Thunderbird extensions for each user if they don't exist
  XPIS=$(find /etc/skel/.thunderbird/pjzwmea6.default/extensions -name *.xpi -type f)
  XPIDIRS=$(find /etc/skel/.thunderbird/pjzwmea6.default/extensions -name '{*}' -type d)
  for USER in $USERS; do
    DIR="/home/$USER/.thunderbird/pjzwmea6.default"
    if [ -d $DIR ]; then
      mkdir -p "$DIR/extensions"
      for XPI in $XPIS; do
        PCK=$(basename $XPI)
        if [ ! -e "$DIR/extensions/$PCK" ]; then
          echo "> TB: Copy $XPI to $DIR/extensions/$PCK"
          cp -f $XPI "$DIR/extensions/$PCK"
        fi
      done
      for XPIDIR in $XPIDIRS; do
        PCKDIR=$(basename $XPIDIR)
        if [ ! -e "$DIR/extensions/$PCKDIR" ]; then
          echo "> TB: Copy $XPI to $DIR/extensions/$PCK"
          cp -rf $XPIDIR "$DIR/extensions/$PCKDIR"
        fi
      done
      PREFS="$DIR/prefs.js"
      echo 'user_pref("extensions.firetray.firstrun", false);' >> $PREFS
      echo 'user_pref("extensions.qls.switch_gulocale", true);' >> $PREFS
      echo 'user_pref("extensions.firetray.installedVersion", "0.4.8");' >> $PREFS
      echo 'user_pref("extensions.shrunked.version", "3.2.3");' >> $PREFS
      echo 'user_pref("extensions.enabledAddons", "%7B25A1388B-6B18-46c3-BEBA-A81915D0DE8F%7D:1.7.8.5,%7Be2fda1a4-762b-4020-b5ad-a41df1933103%7D:2.6.4,%7B9533f794-00b4-4354-aa15-c2bbda6989f8%7D:0.4.8,shrunked%40darktrojan.net:3.2.3,%7B3ed8cc52-86fc-4613-9026-c1ef969da4c3%7D:2.8.0.4");' >> $PREFS
      chown -Rf $USER:$USER "$DIR/extensions"
    fi
  done
fi

for USER in $USERS; do
  # Adjust panel height if it's the default 24px
  FLE="/home/$USER/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml"
  if [ -e "$FLE" ]; then
    sed -i 's/value="24"/value="26"/' "$FLE"
  fi
done
